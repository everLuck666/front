/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.21.12
 * source: commentrpc.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace commentrpc {
    export class Request extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ping?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ping" in data && data.ping != undefined) {
                    this.ping = data.ping;
                }
            }
        }
        get ping() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set ping(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            ping?: string;
        }): Request {
            const message = new Request({});
            if (data.ping != null) {
                message.ping = data.ping;
            }
            return message;
        }
        toObject() {
            const data: {
                ping?: string;
            } = {};
            if (this.ping != null) {
                data.ping = this.ping;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ping.length)
                writer.writeString(1, this.ping);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Request {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Request();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ping = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Request {
            return Request.deserialize(bytes);
        }
    }
    export class Response extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            pong?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("pong" in data && data.pong != undefined) {
                    this.pong = data.pong;
                }
            }
        }
        get pong() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set pong(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            pong?: string;
        }): Response {
            const message = new Response({});
            if (data.pong != null) {
                message.pong = data.pong;
            }
            return message;
        }
        toObject() {
            const data: {
                pong?: string;
            } = {};
            if (this.pong != null) {
                data.pong = this.pong;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.pong.length)
                writer.writeString(1, this.pong);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Response {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Response();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.pong = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Response {
            return Response.deserialize(bytes);
        }
    }
    export class GetPostByIdReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            postId?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("postId" in data && data.postId != undefined) {
                    this.postId = data.postId;
                }
            }
        }
        get postId() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set postId(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            postId?: number;
        }): GetPostByIdReq {
            const message = new GetPostByIdReq({});
            if (data.postId != null) {
                message.postId = data.postId;
            }
            return message;
        }
        toObject() {
            const data: {
                postId?: number;
            } = {};
            if (this.postId != null) {
                data.postId = this.postId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.postId != 0)
                writer.writeInt64(1, this.postId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetPostByIdReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetPostByIdReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.postId = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetPostByIdReq {
            return GetPostByIdReq.deserialize(bytes);
        }
    }
    export class GetPostByIdResp extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            postItem?: PostItem;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("postItem" in data && data.postItem != undefined) {
                    this.postItem = data.postItem;
                }
            }
        }
        get postItem() {
            return pb_1.Message.getWrapperField(this, PostItem, 1) as PostItem;
        }
        set postItem(value: PostItem) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_postItem() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            postItem?: ReturnType<typeof PostItem.prototype.toObject>;
        }): GetPostByIdResp {
            const message = new GetPostByIdResp({});
            if (data.postItem != null) {
                message.postItem = PostItem.fromObject(data.postItem);
            }
            return message;
        }
        toObject() {
            const data: {
                postItem?: ReturnType<typeof PostItem.prototype.toObject>;
            } = {};
            if (this.postItem != null) {
                data.postItem = this.postItem.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_postItem)
                writer.writeMessage(1, this.postItem, () => this.postItem.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetPostByIdResp {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetPostByIdResp();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.postItem, () => message.postItem = PostItem.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetPostByIdResp {
            return GetPostByIdResp.deserialize(bytes);
        }
    }
    export class CreatePostReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            title?: string;
            content?: string;
            tag?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("title" in data && data.title != undefined) {
                    this.title = data.title;
                }
                if ("content" in data && data.content != undefined) {
                    this.content = data.content;
                }
                if ("tag" in data && data.tag != undefined) {
                    this.tag = data.tag;
                }
            }
        }
        get title() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set title(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get content() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set content(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get tag() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set tag(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            title?: string;
            content?: string;
            tag?: string;
        }): CreatePostReq {
            const message = new CreatePostReq({});
            if (data.title != null) {
                message.title = data.title;
            }
            if (data.content != null) {
                message.content = data.content;
            }
            if (data.tag != null) {
                message.tag = data.tag;
            }
            return message;
        }
        toObject() {
            const data: {
                title?: string;
                content?: string;
                tag?: string;
            } = {};
            if (this.title != null) {
                data.title = this.title;
            }
            if (this.content != null) {
                data.content = this.content;
            }
            if (this.tag != null) {
                data.tag = this.tag;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.title.length)
                writer.writeString(1, this.title);
            if (this.content.length)
                writer.writeString(2, this.content);
            if (this.tag.length)
                writer.writeString(3, this.tag);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreatePostReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreatePostReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.title = reader.readString();
                        break;
                    case 2:
                        message.content = reader.readString();
                        break;
                    case 3:
                        message.tag = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreatePostReq {
            return CreatePostReq.deserialize(bytes);
        }
    }
    export class CreatePostResp extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            postId?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("postId" in data && data.postId != undefined) {
                    this.postId = data.postId;
                }
            }
        }
        get postId() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set postId(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            postId?: number;
        }): CreatePostResp {
            const message = new CreatePostResp({});
            if (data.postId != null) {
                message.postId = data.postId;
            }
            return message;
        }
        toObject() {
            const data: {
                postId?: number;
            } = {};
            if (this.postId != null) {
                data.postId = this.postId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.postId != 0)
                writer.writeInt64(1, this.postId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreatePostResp {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreatePostResp();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.postId = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreatePostResp {
            return CreatePostResp.deserialize(bytes);
        }
    }
    export class GetPostListReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            page?: number;
            pageSize?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("page" in data && data.page != undefined) {
                    this.page = data.page;
                }
                if ("pageSize" in data && data.pageSize != undefined) {
                    this.pageSize = data.pageSize;
                }
            }
        }
        get page() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set page(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get pageSize() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set pageSize(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            page?: number;
            pageSize?: number;
        }): GetPostListReq {
            const message = new GetPostListReq({});
            if (data.page != null) {
                message.page = data.page;
            }
            if (data.pageSize != null) {
                message.pageSize = data.pageSize;
            }
            return message;
        }
        toObject() {
            const data: {
                page?: number;
                pageSize?: number;
            } = {};
            if (this.page != null) {
                data.page = this.page;
            }
            if (this.pageSize != null) {
                data.pageSize = this.pageSize;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.page != 0)
                writer.writeInt32(1, this.page);
            if (this.pageSize != 0)
                writer.writeInt32(2, this.pageSize);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetPostListReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetPostListReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.page = reader.readInt32();
                        break;
                    case 2:
                        message.pageSize = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetPostListReq {
            return GetPostListReq.deserialize(bytes);
        }
    }
    export class GetPostListResp extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            list?: PostItem[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("list" in data && data.list != undefined) {
                    this.list = data.list;
                }
            }
        }
        get list() {
            return pb_1.Message.getRepeatedWrapperField(this, PostItem, 1) as PostItem[];
        }
        set list(value: PostItem[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            list?: ReturnType<typeof PostItem.prototype.toObject>[];
        }): GetPostListResp {
            const message = new GetPostListResp({});
            if (data.list != null) {
                message.list = data.list.map(item => PostItem.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                list?: ReturnType<typeof PostItem.prototype.toObject>[];
            } = {};
            if (this.list != null) {
                data.list = this.list.map((item: PostItem) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.list.length)
                writer.writeRepeatedMessage(1, this.list, (item: PostItem) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetPostListResp {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetPostListResp();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.list, () => pb_1.Message.addToRepeatedWrapperField(message, 1, PostItem.deserialize(reader), PostItem));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetPostListResp {
            return GetPostListResp.deserialize(bytes);
        }
    }
    export class PostItem extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
            title?: string;
            content?: string;
            userId?: string;
            categoryId?: number;
            createdAt?: string;
            avatarUrl?: string;
            tag?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("title" in data && data.title != undefined) {
                    this.title = data.title;
                }
                if ("content" in data && data.content != undefined) {
                    this.content = data.content;
                }
                if ("userId" in data && data.userId != undefined) {
                    this.userId = data.userId;
                }
                if ("categoryId" in data && data.categoryId != undefined) {
                    this.categoryId = data.categoryId;
                }
                if ("createdAt" in data && data.createdAt != undefined) {
                    this.createdAt = data.createdAt;
                }
                if ("avatarUrl" in data && data.avatarUrl != undefined) {
                    this.avatarUrl = data.avatarUrl;
                }
                if ("tag" in data && data.tag != undefined) {
                    this.tag = data.tag;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get title() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set title(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get content() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set content(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get userId() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set userId(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get categoryId() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set categoryId(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get createdAt() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set createdAt(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get avatarUrl() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set avatarUrl(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get tag() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set tag(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        static fromObject(data: {
            id?: number;
            title?: string;
            content?: string;
            userId?: string;
            categoryId?: number;
            createdAt?: string;
            avatarUrl?: string;
            tag?: string;
        }): PostItem {
            const message = new PostItem({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.title != null) {
                message.title = data.title;
            }
            if (data.content != null) {
                message.content = data.content;
            }
            if (data.userId != null) {
                message.userId = data.userId;
            }
            if (data.categoryId != null) {
                message.categoryId = data.categoryId;
            }
            if (data.createdAt != null) {
                message.createdAt = data.createdAt;
            }
            if (data.avatarUrl != null) {
                message.avatarUrl = data.avatarUrl;
            }
            if (data.tag != null) {
                message.tag = data.tag;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
                title?: string;
                content?: string;
                userId?: string;
                categoryId?: number;
                createdAt?: string;
                avatarUrl?: string;
                tag?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.title != null) {
                data.title = this.title;
            }
            if (this.content != null) {
                data.content = this.content;
            }
            if (this.userId != null) {
                data.userId = this.userId;
            }
            if (this.categoryId != null) {
                data.categoryId = this.categoryId;
            }
            if (this.createdAt != null) {
                data.createdAt = this.createdAt;
            }
            if (this.avatarUrl != null) {
                data.avatarUrl = this.avatarUrl;
            }
            if (this.tag != null) {
                data.tag = this.tag;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeInt64(1, this.id);
            if (this.title.length)
                writer.writeString(2, this.title);
            if (this.content.length)
                writer.writeString(3, this.content);
            if (this.userId.length)
                writer.writeString(4, this.userId);
            if (this.categoryId != 0)
                writer.writeInt64(5, this.categoryId);
            if (this.createdAt.length)
                writer.writeString(6, this.createdAt);
            if (this.avatarUrl.length)
                writer.writeString(7, this.avatarUrl);
            if (this.tag.length)
                writer.writeString(8, this.tag);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PostItem {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PostItem();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt64();
                        break;
                    case 2:
                        message.title = reader.readString();
                        break;
                    case 3:
                        message.content = reader.readString();
                        break;
                    case 4:
                        message.userId = reader.readString();
                        break;
                    case 5:
                        message.categoryId = reader.readInt64();
                        break;
                    case 6:
                        message.createdAt = reader.readString();
                        break;
                    case 7:
                        message.avatarUrl = reader.readString();
                        break;
                    case 8:
                        message.tag = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PostItem {
            return PostItem.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedCommentrpcService {
        static definition = {
            Ping: {
                path: "/commentrpc.Commentrpc/Ping",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: Request) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => Request.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: Response) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => Response.deserialize(new Uint8Array(bytes))
            },
            CreatePost: {
                path: "/commentrpc.Commentrpc/CreatePost",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CreatePostReq) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CreatePostReq.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CreatePostResp) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CreatePostResp.deserialize(new Uint8Array(bytes))
            },
            GetPostList: {
                path: "/commentrpc.Commentrpc/GetPostList",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetPostListReq) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetPostListReq.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetPostListResp) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetPostListResp.deserialize(new Uint8Array(bytes))
            },
            GetPostById: {
                path: "/commentrpc.Commentrpc/GetPostById",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetPostByIdReq) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetPostByIdReq.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetPostByIdResp) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetPostByIdResp.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract Ping(call: grpc_1.ServerUnaryCall<Request, Response>, callback: grpc_1.sendUnaryData<Response>): void;
        abstract CreatePost(call: grpc_1.ServerUnaryCall<CreatePostReq, CreatePostResp>, callback: grpc_1.sendUnaryData<CreatePostResp>): void;
        abstract GetPostList(call: grpc_1.ServerUnaryCall<GetPostListReq, GetPostListResp>, callback: grpc_1.sendUnaryData<GetPostListResp>): void;
        abstract GetPostById(call: grpc_1.ServerUnaryCall<GetPostByIdReq, GetPostByIdResp>, callback: grpc_1.sendUnaryData<GetPostByIdResp>): void;
    }
    export class CommentrpcClient extends grpc_1.makeGenericClientConstructor(UnimplementedCommentrpcService.definition, "Commentrpc", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        Ping: GrpcUnaryServiceInterface<Request, Response> = (message: Request, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Response>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Response>, callback?: grpc_1.requestCallback<Response>): grpc_1.ClientUnaryCall => {
            return super.Ping(message, metadata, options, callback);
        };
        CreatePost: GrpcUnaryServiceInterface<CreatePostReq, CreatePostResp> = (message: CreatePostReq, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CreatePostResp>, options?: grpc_1.CallOptions | grpc_1.requestCallback<CreatePostResp>, callback?: grpc_1.requestCallback<CreatePostResp>): grpc_1.ClientUnaryCall => {
            return super.CreatePost(message, metadata, options, callback);
        };
        GetPostList: GrpcUnaryServiceInterface<GetPostListReq, GetPostListResp> = (message: GetPostListReq, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetPostListResp>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetPostListResp>, callback?: grpc_1.requestCallback<GetPostListResp>): grpc_1.ClientUnaryCall => {
            return super.GetPostList(message, metadata, options, callback);
        };
        GetPostById: GrpcUnaryServiceInterface<GetPostByIdReq, GetPostByIdResp> = (message: GetPostByIdReq, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetPostByIdResp>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetPostByIdResp>, callback?: grpc_1.requestCallback<GetPostByIdResp>): grpc_1.ClientUnaryCall => {
            return super.GetPostById(message, metadata, options, callback);
        };
    }
}

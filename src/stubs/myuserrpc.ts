/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.21.12
 * source: myuserrpc.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace myuserrpc {
    export enum ErrorCode {
        SUCCESS = 0,
        INVALID_ARGUMENT = 1,
        ALREADY_EXISTS = 2,
        INTERNAL_ERROR = 3,
        UNAUTHORIZED = 4,
        NOT_FOUND = 5
    }
    export class Request extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ping?: string;
            title?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ping" in data && data.ping != undefined) {
                    this.ping = data.ping;
                }
                if ("title" in data && data.title != undefined) {
                    this.title = data.title;
                }
            }
        }
        get ping() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set ping(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get title() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set title(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            ping?: string;
            title?: string;
        }): Request {
            const message = new Request({});
            if (data.ping != null) {
                message.ping = data.ping;
            }
            if (data.title != null) {
                message.title = data.title;
            }
            return message;
        }
        toObject() {
            const data: {
                ping?: string;
                title?: string;
            } = {};
            if (this.ping != null) {
                data.ping = this.ping;
            }
            if (this.title != null) {
                data.title = this.title;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ping.length)
                writer.writeString(1, this.ping);
            if (this.title.length)
                writer.writeString(2, this.title);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Request {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Request();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ping = reader.readString();
                        break;
                    case 2:
                        message.title = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Request {
            return Request.deserialize(bytes);
        }
    }
    export class Response extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            pong?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("pong" in data && data.pong != undefined) {
                    this.pong = data.pong;
                }
            }
        }
        get pong() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set pong(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            pong?: string;
        }): Response {
            const message = new Response({});
            if (data.pong != null) {
                message.pong = data.pong;
            }
            return message;
        }
        toObject() {
            const data: {
                pong?: string;
            } = {};
            if (this.pong != null) {
                data.pong = this.pong;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.pong.length)
                writer.writeString(1, this.pong);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Response {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Response();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.pong = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Response {
            return Response.deserialize(bytes);
        }
    }
    export class UserResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            code?: ErrorCode;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
            }
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 1, ErrorCode.SUCCESS) as ErrorCode;
        }
        set code(value: ErrorCode) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            code?: ErrorCode;
        }): UserResponse {
            const message = new UserResponse({});
            if (data.code != null) {
                message.code = data.code;
            }
            return message;
        }
        toObject() {
            const data: {
                code?: ErrorCode;
            } = {};
            if (this.code != null) {
                data.code = this.code;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.code != ErrorCode.SUCCESS)
                writer.writeEnum(1, this.code);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UserResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UserResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.code = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UserResponse {
            return UserResponse.deserialize(bytes);
        }
    }
    export class User extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            username?: string;
            password?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("username" in data && data.username != undefined) {
                    this.username = data.username;
                }
                if ("password" in data && data.password != undefined) {
                    this.password = data.password;
                }
            }
        }
        get username() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set username(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get password() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set password(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            username?: string;
            password?: string;
        }): User {
            const message = new User({});
            if (data.username != null) {
                message.username = data.username;
            }
            if (data.password != null) {
                message.password = data.password;
            }
            return message;
        }
        toObject() {
            const data: {
                username?: string;
                password?: string;
            } = {};
            if (this.username != null) {
                data.username = this.username;
            }
            if (this.password != null) {
                data.password = this.password;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.username.length)
                writer.writeString(1, this.username);
            if (this.password.length)
                writer.writeString(2, this.password);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): User {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new User();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.username = reader.readString();
                        break;
                    case 2:
                        message.password = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): User {
            return User.deserialize(bytes);
        }
    }
    export class AddUserRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            username?: string;
            password?: string;
            avatarUrl?: string;
            email?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("username" in data && data.username != undefined) {
                    this.username = data.username;
                }
                if ("password" in data && data.password != undefined) {
                    this.password = data.password;
                }
                if ("avatarUrl" in data && data.avatarUrl != undefined) {
                    this.avatarUrl = data.avatarUrl;
                }
                if ("email" in data && data.email != undefined) {
                    this.email = data.email;
                }
            }
        }
        get username() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set username(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get password() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set password(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get avatarUrl() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set avatarUrl(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get email() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set email(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            username?: string;
            password?: string;
            avatarUrl?: string;
            email?: string;
        }): AddUserRequest {
            const message = new AddUserRequest({});
            if (data.username != null) {
                message.username = data.username;
            }
            if (data.password != null) {
                message.password = data.password;
            }
            if (data.avatarUrl != null) {
                message.avatarUrl = data.avatarUrl;
            }
            if (data.email != null) {
                message.email = data.email;
            }
            return message;
        }
        toObject() {
            const data: {
                username?: string;
                password?: string;
                avatarUrl?: string;
                email?: string;
            } = {};
            if (this.username != null) {
                data.username = this.username;
            }
            if (this.password != null) {
                data.password = this.password;
            }
            if (this.avatarUrl != null) {
                data.avatarUrl = this.avatarUrl;
            }
            if (this.email != null) {
                data.email = this.email;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.username.length)
                writer.writeString(1, this.username);
            if (this.password.length)
                writer.writeString(2, this.password);
            if (this.avatarUrl.length)
                writer.writeString(3, this.avatarUrl);
            if (this.email.length)
                writer.writeString(4, this.email);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AddUserRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AddUserRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.username = reader.readString();
                        break;
                    case 2:
                        message.password = reader.readString();
                        break;
                    case 3:
                        message.avatarUrl = reader.readString();
                        break;
                    case 4:
                        message.email = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AddUserRequest {
            return AddUserRequest.deserialize(bytes);
        }
    }
    export class CheckUsernameAndPasswordRsp extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            valid?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("valid" in data && data.valid != undefined) {
                    this.valid = data.valid;
                }
            }
        }
        get valid() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set valid(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            valid?: boolean;
        }): CheckUsernameAndPasswordRsp {
            const message = new CheckUsernameAndPasswordRsp({});
            if (data.valid != null) {
                message.valid = data.valid;
            }
            return message;
        }
        toObject() {
            const data: {
                valid?: boolean;
            } = {};
            if (this.valid != null) {
                data.valid = this.valid;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.valid != false)
                writer.writeBool(1, this.valid);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CheckUsernameAndPasswordRsp {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CheckUsernameAndPasswordRsp();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.valid = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CheckUsernameAndPasswordRsp {
            return CheckUsernameAndPasswordRsp.deserialize(bytes);
        }
    }
    export class GetUserInfoReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
            }
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            token?: string;
        }): GetUserInfoReq {
            const message = new GetUserInfoReq({});
            if (data.token != null) {
                message.token = data.token;
            }
            return message;
        }
        toObject() {
            const data: {
                token?: string;
            } = {};
            if (this.token != null) {
                data.token = this.token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.token.length)
                writer.writeString(1, this.token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetUserInfoReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetUserInfoReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetUserInfoReq {
            return GetUserInfoReq.deserialize(bytes);
        }
    }
    export class GetUserInfoResp extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            username?: string;
            avatarUrl?: string;
            email?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("username" in data && data.username != undefined) {
                    this.username = data.username;
                }
                if ("avatarUrl" in data && data.avatarUrl != undefined) {
                    this.avatarUrl = data.avatarUrl;
                }
                if ("email" in data && data.email != undefined) {
                    this.email = data.email;
                }
            }
        }
        get username() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set username(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get avatarUrl() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set avatarUrl(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get email() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set email(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            username?: string;
            avatarUrl?: string;
            email?: string;
        }): GetUserInfoResp {
            const message = new GetUserInfoResp({});
            if (data.username != null) {
                message.username = data.username;
            }
            if (data.avatarUrl != null) {
                message.avatarUrl = data.avatarUrl;
            }
            if (data.email != null) {
                message.email = data.email;
            }
            return message;
        }
        toObject() {
            const data: {
                username?: string;
                avatarUrl?: string;
                email?: string;
            } = {};
            if (this.username != null) {
                data.username = this.username;
            }
            if (this.avatarUrl != null) {
                data.avatarUrl = this.avatarUrl;
            }
            if (this.email != null) {
                data.email = this.email;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.username.length)
                writer.writeString(1, this.username);
            if (this.avatarUrl.length)
                writer.writeString(2, this.avatarUrl);
            if (this.email.length)
                writer.writeString(3, this.email);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetUserInfoResp {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetUserInfoResp();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.username = reader.readString();
                        break;
                    case 2:
                        message.avatarUrl = reader.readString();
                        break;
                    case 3:
                        message.email = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetUserInfoResp {
            return GetUserInfoResp.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedMyuserrpcService {
        static definition = {
            Ping: {
                path: "/myuserrpc.Myuserrpc/Ping",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: Request) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => Request.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: Response) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => Response.deserialize(new Uint8Array(bytes))
            },
            AddUser: {
                path: "/myuserrpc.Myuserrpc/AddUser",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: AddUserRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => AddUserRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: UserResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => UserResponse.deserialize(new Uint8Array(bytes))
            },
            GetUserInfo: {
                path: "/myuserrpc.Myuserrpc/GetUserInfo",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetUserInfoReq) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetUserInfoReq.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetUserInfoResp) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetUserInfoResp.deserialize(new Uint8Array(bytes))
            },
            CheckUsernameAndPassword: {
                path: "/myuserrpc.Myuserrpc/CheckUsernameAndPassword",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: User) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => User.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CheckUsernameAndPasswordRsp) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CheckUsernameAndPasswordRsp.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract Ping(call: grpc_1.ServerUnaryCall<Request, Response>, callback: grpc_1.sendUnaryData<Response>): void;
        abstract AddUser(call: grpc_1.ServerUnaryCall<AddUserRequest, UserResponse>, callback: grpc_1.sendUnaryData<UserResponse>): void;
        abstract GetUserInfo(call: grpc_1.ServerUnaryCall<GetUserInfoReq, GetUserInfoResp>, callback: grpc_1.sendUnaryData<GetUserInfoResp>): void;
        abstract CheckUsernameAndPassword(call: grpc_1.ServerUnaryCall<User, CheckUsernameAndPasswordRsp>, callback: grpc_1.sendUnaryData<CheckUsernameAndPasswordRsp>): void;
    }
    export class MyuserrpcClient extends grpc_1.makeGenericClientConstructor(UnimplementedMyuserrpcService.definition, "Myuserrpc", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        Ping: GrpcUnaryServiceInterface<Request, Response> = (message: Request, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Response>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Response>, callback?: grpc_1.requestCallback<Response>): grpc_1.ClientUnaryCall => {
            return super.Ping(message, metadata, options, callback);
        };
        AddUser: GrpcUnaryServiceInterface<AddUserRequest, UserResponse> = (message: AddUserRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<UserResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<UserResponse>, callback?: grpc_1.requestCallback<UserResponse>): grpc_1.ClientUnaryCall => {
            return super.AddUser(message, metadata, options, callback);
        };
        GetUserInfo: GrpcUnaryServiceInterface<GetUserInfoReq, GetUserInfoResp> = (message: GetUserInfoReq, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetUserInfoResp>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetUserInfoResp>, callback?: grpc_1.requestCallback<GetUserInfoResp>): grpc_1.ClientUnaryCall => {
            return super.GetUserInfo(message, metadata, options, callback);
        };
        CheckUsernameAndPassword: GrpcUnaryServiceInterface<User, CheckUsernameAndPasswordRsp> = (message: User, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CheckUsernameAndPasswordRsp>, options?: grpc_1.CallOptions | grpc_1.requestCallback<CheckUsernameAndPasswordRsp>, callback?: grpc_1.requestCallback<CheckUsernameAndPasswordRsp>): grpc_1.ClientUnaryCall => {
            return super.CheckUsernameAndPassword(message, metadata, options, callback);
        };
    }
}
